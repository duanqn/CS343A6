  SODA TEST DOC
  =============
  This test doc is split into two parts.  The first is modular tests to test individual classes independently of the
  rest of the program.  The second is demonstrative program output with its corresponding config file.  The modular
  test often rely on making "dummy" classes an mimicking their behavior in order to test that implemented class.

  Contents:
    1.1 Bank
    1.2 NameServer
    1.3 Groupoff 
    1.4 VendingMachine
    2.1 Example output 1
    2.2 Example output 2

######################################################################################################################
  1.1 Bank
######################################################################################################################
      This test isolates and tests the Bank class.  It does so by constructing two arrays, one of 3 Withdrawers and
      one with 3 Depositers, each pair associates to an account in the bank.  The Withdrawers each withdraw a limited
      but random amount from their account until a total of $10 has been withdrawn.  The Depositers do the same but
      depositing into their associated account.

      The output to this test shows the Withdrawers are forced to wait, denoted buy '>' until there is at least
      enough money in the associated account to perform this withdraw. Completing this action is denoted by '>'. 
      After each Withdrawer makes their first call to withdraw, consecutive withdraws can be seen completed without
      blocking.  Indicated by the '>' followed immediately by the '<' in the next line.  Thus this test gives good
      coverage that Bank can handle multiple calls of withdraw or deposit, to the same or different accounts in Bank
      without synchronization error.
######################################################################################################################
      #include "../Bank.h"
      #include "../MPRNG.h"

      #include <iostream>
      #include <sstream>

      #define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))

      static const unsigned int money = 10;
      static const unsigned int maxWithdraw = 5;
      static const unsigned int maxDeposit = 3;
      static const unsigned int numStuds = 3;
      static Bank* b;
      MPRNG g_random( getpid() );

      // a test task to perform withdraws
      _Task Withdrawer {
          const unsigned int studId;

          void main() {
            std::cerr << "Withdrawer " << studId << " start" << std::endl;
            unsigned int totalWithdraw = money;
            while ( totalWithdraw > 0 ) {
              // withdraw some money
              unsigned int val = g_random( 1, MIN(totalWithdraw, maxWithdraw) );
              std::cerr << "\tWithdrawer " << studId << " withdrew: $" << val << std::endl;
              b->withdraw( studId, val );
              totalWithdraw -= val;
            }
            std::cerr << "Withdrawer " << studId << " end" << std::endl;
          } // main

        public:
          static unsigned int idcount;
          Withdrawer() : studId( idcount ) { idcount += 1; }
      };
      unsigned int Withdrawer::idcount = 0;

      // a test task to perform deposits
      _Task Depositer {
          const unsigned int studId;

          void main() {
            std::cerr << "Depositer " << studId << " start" << std::endl;
            unsigned int totalDeposit = money;
            while ( totalDeposit > 0 ) {
              // deposit some money
              unsigned int val = g_random( 1, MIN(totalDeposit, maxDeposit) );
              std::cerr << "\tDepositer " << studId << " deposited: $" << val << std::endl;
              b->deposit( studId, val );
              totalDeposit -= val;
            }
            std::cerr << "Depositer " << studId << " end" << std::endl;
          } // main

        public:
          static unsigned int idcount;
          Depositer() : studId( idcount ) { idcount += 1; }
      };
      unsigned int Depositer::idcount = 0;

      void uMain::main() {
        std::cerr << "main() start" << std::endl;
        b = new Bank( numStuds );
        {
          Withdrawer w[numStuds];
          Depositer d[numStuds];
        }
        delete b;
        std::cerr << "main() end" << std::endl;
      }
######################################################################################################################
      Withdrawer 0 start
              >withdraw( 0, 5)
      Withdrawer 1 start
              >withdraw( 1, 4)
      Withdrawer 2 start
              >withdraw( 2, 4)
      Depositer 0 start
              Depositer 0 deposited: $3
              Depositer 0 deposited: $1
              Depositer 0 deposited: $3
              Depositer 0 deposited: $1
      Depositer 1 start
              Depositer 1 deposited: $2
      Depositer 2 start
              Depositer 2 deposited: $2
              <Withdrawer 0 withdrew: $5
              >withdraw( 0, 1)
              Depositer 0 deposited: $1
              Depositer 1 deposited: $1
              Depositer 2 deposited: $1
              <Withdrawer 0 withdrew: $1
              >withdraw( 0, 3)
              Depositer 0 deposited: $1
              Depositer 1 deposited: $1
              Depositer 2 deposited: $2
              <Withdrawer 0 withdrew: $3
              >withdraw( 0, 1)
      Depositer 0 end
              Depositer 1 deposited: $2
              <Withdrawer 1 withdrew: $4
              >withdraw( 1, 5)
              Depositer 2 deposited: $2
              <Withdrawer 2 withdrew: $4
              >withdraw( 2, 1)
              <Withdrawer 0 withdrew: $1
      Withdrawer 0 end
              Depositer 1 deposited: $3
              Depositer 2 deposited: $1
              <Withdrawer 2 withdrew: $1
              >withdraw( 2, 5)
              Depositer 1 deposited: $1
              <Withdrawer 1 withdrew: $5
              >withdraw( 1, 1)
              Depositer 2 deposited: $1
      Depositer 1 end
              <Withdrawer 1 withdrew: $1
      Withdrawer 1 end
              Depositer 2 deposited: $1
      Depositer 2 end
              <Withdrawer 2 withdrew: $5
      Withdrawer 2 end
      main() end
######################################################################################################################
  1.2 NameServer
      This test isolates and tests the Bank class.  The test creates a dummy VendingMachine, Student and Truck.  The
      dummy VendingMachine pretends to be 3 vending machines and registers them to the NameServer.  The Truck simply
      calls restocked() on the first VendingMachine it gets from the server.  The dummy Student pretends to be 5
      students and each student registers.  Then each student changes the vending machine they are one twice.

      The output of the test shows that:
        1. All of the vending machines register.
        2. The truck is able to make its restock though the pointer provided by NameServer.
        3. Each student is successfully associated to a vending machine and in round-robin fashion.
        4. When the students request for a new machine they receive the next machine in the cycle and that the wrap
            around for this works correctly (that is after the 4th they go to the 0th).
######################################################################################################################
      #include "../NameServer.h"
      #include "../Printer.h"
      #include "../Student.h"
      #include "../Truck.h"
      #include "../VendingMachine.h"

      #include <iostream>
      #include <sstream>

      static const unsigned int numVendingMachines = 3;
      static const unsigned int numStudents = 5;
      static const unsigned int extraCalls = 10;
      static NameServer* ns;
      static std::ostringstream out;

      // Student test methods
      void Student::main() {
        out << "Student start" << '\n';
        for ( unsigned int i = 0; i < numStudents; i += 1 ) {
          ns->getMachine( i );
        }
        for ( unsigned int i = 0; i < extraCalls; i += 1 ) {
          ns->getMachine( i % numStudents );
        }
        out << "Student end" << '\n';
      }

      // Truck test methods
      void Truck::main() {
        out << "Truck start" << '\n';
        VendingMachine* myVend = *(ns->getMachineList());
        myVend->restocked();
        out << "Truck end" << '\n';
      }

      // VendingMachine test methods
      void VendingMachine::main() {}
      void VendingMachine::restocked() {
        out << "\trestocked()!" << '\n';
      }

      // tester task
      _Task tester {
          void main() {
          out << "VendingMachine start" << '\n';
          static VendingMachine vends[numVendingMachines];
          out << "made vends" << std::endl;
          for ( unsigned int i = 0; i < numVendingMachines; i += 1 ) {
            ns->VMregister( vends + i );
          }
          out << "VendingMachine end" << '\n';
        }
      };

      void uMain::main() {
        {
          out << "main() start" << '\n';
          Printer p( 1, 1, 1 );
          ns = new NameServer( p, numVendingMachines, numStudents );
          Truck t;
          tester vm;
          { Student s; }
          delete ns;
          out << "main() end" << '\n';
        }
        std::cout << out.str() << std::endl;
      }
######################################################################################################################
      Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
      ******* ******* ******* ******* ******* ******* ******* ******* *******
                              S
                              R0
                              R1
                              R2
                              N0,0
                              N1,1
                              N2,2
                              N3,0
                              N4,1
                              N0,1
                              N1,2
                              N2,0
                              N3,1
                              N4,2
                              N0,2
                              N1,0
                              N2,1
                              N3,2
                              N4,0
                              F
      ***********************
      main() start
      Truck start
      VendingMachine start
      made vends
      Student start
      VendingMachine end
              restocked()!
      Truck end
      Student end
      main() end
######################################################################################################################
  1.3 Groupoff
      This test isolates and tests the Groupoff class.  The starts by making 7 calls to giftCard() to get 7 future
      WATCard.  The program then loops checking each future WATCard, if it finds none it yields once.

      The test output when run multiple times shows that the number of future cards delivered is a number between
      0 and 7 and that the future WATCards that actually get allocated are distributed randomly. 
######################################################################################################################
      #include "../Groupoff.h"
      #include "../MPRNG.h"
      #include "../Printer.h"

      #include <uFuture.h>
      #include <iostream>
      #include <sstream>

      static const unsigned int numStudents = 7;
      static const unsigned int sodaCost = 5;
      static unsigned int depositTotal = 0;
      static WATCard::FWATCard fwatCard[numStudents];
      static std::ostringstream out;
      MPRNG g_random( getpid() );

      // WATCard test methods
      WATCard::WATCard() {}
      WATCard::~WATCard() {}
      void WATCard::deposit( unsigned int val ) {
        depositTotal += val;
      }
      void WATCard::withdraw( unsigned int val ) {
        depositTotal -= val;
      }
      unsigned int WATCard::getBalance() {
        return depositTotal;
      }

      void uMain::main() {
        {
          out << "main() start" << '\n';
          Printer p( 1, 1, 1 );
          Groupoff g( p, numStudents, sodaCost, 1 );
          for ( unsigned int i = 0; i < numStudents; i += 1 ) {
            fwatCard[i] = g.giftCard();
          }
          yield( 1 );
          for ( unsigned int i = 0; i < numStudents; i += 1 ) {
            if ( fwatCard[i].available() ) {
              out << "\tgot it! it contains $" << sodaCost << '\n';
              fwatCard[i]()->withdraw( sodaCost );
              out << "\tfreeing card " << i << '\n';
              delete fwatCard[i]();
              fwatCard[i].reset();
            } else {
              out << "\tdidn't get it.." << '\n';
              yield( 1 );
            }
          }
          out << "main() end" << '\n';
        }
        
        std::cout << out.str() << std::endl;
      }
######################################################################################################################
@ubuntu1604-002% ./sodaGroupoff
      Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
      ******* ******* ******* ******* ******* ******* ******* ******* *******
              S
              D5
              D5
              D5
              D5
              D5
              D5
              F
      ***********************
      main() start
              didn't get it..
              didn't get it..
              didn't get it..
              got it! it contains $5
              freeing card 3
              got it! it contains $5
              freeing card 4
              didn't get it..
              didn't get it..
      main() end
@ubuntu1604-002% ./sodaGroupoff
      Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
      ******* ******* ******* ******* ******* ******* ******* ******* *******
              S
              D5
              D5
              D5
              D5
              D5
              F
      ***********************
      main() start
              didn't get it..
              didn't get it..
              got it! it contains $5
              freeing card 2
              didn't get it..
              got it! it contains $5
              freeing card 4
              didn't get it..
              got it! it contains $5
              freeing card 6
      main() end
@ubuntu1604-002% ./sodaGroupoff
      Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
      ******* ******* ******* ******* ******* ******* ******* ******* *******
              S
              D5
              D5
              D5
              D5
              D5
              D5
              F
      ***********************
      main() start
              didn't get it..
              got it! it contains $5
              freeing card 1
              didn't get it..
              got it! it contains $5
              freeing card 3
              didn't get it..
              didn't get it..
              didn't get it..
      main() end
######################################################################################################################
  1.4 VendingMachine
      This test isolates and tests the VendingMachine class.  The test creates a student and has them call call buy()
      10 times.

      This test ensures:
        1. The VendingMachine raises stock when the student tries to buy a soda that is out of stock.
        2. The VendingMachine raises Free periodically, approximately 1 in 5 times.
        3. The VendingMachine raises Funds when the student lacks funds to buy the soda.
        4. If none of the above, the VendingMachine lets the student buy the soda.
######################################################################################################################
        #include "../VendingMachine.h"
        #include "../NameServer.h"
        #include "../Student.h"
        #include "../WATCard.h"
        #include "../MPRNG.h"
        #include "../Printer.h"

        #include <iostream>
        #include <sstream>

        static VendingMachine* v;
        static WATCard wc;
        static unsigned int balance = 5;
        static const int numtimes = 10;
        static std::ostringstream out;

        // NameServer test methods
        void NameServer::main() {}
        NameServer::~NameServer() {}
        void NameServer::VMregister( VendingMachine* vm ) {}

        // WATCard test methods
        WATCard::WATCard() {}
        WATCard::~WATCard() {}
        void WATCard::withdraw( unsigned int amount ) {
          balance -= amount;
          out << "withdrew " << amount
              << " balance now: " << balance << '\n';
        }
        unsigned int WATCard::getBalance() {
          out << "getBalance() = " << balance << '\n';
          return balance;
        }

        // Student test methods
        void Student::main() {
          out << "Student start " << '\n';
          for ( int i = 0; i < numtimes; i += 1 ) {
            try { _Enable {
              out << "buy()" << '\n';
              out << "balance: " << balance << '\n';
              out << "Stock: " << v->inventory()[0] << '\n';
              v->restocked();
              v->buy( VendingMachine::Flavours::BluesBlackCherry, wc );
              out << "\tPurchase!" << '\n';
            }}
            catch ( VendingMachine::Free ) {
              out << "\tFree!" << '\n';

            }
            catch ( VendingMachine::Funds ) {
              out << "\tFunds!" << '\n';
              balance += 13;
            }
            catch ( VendingMachine::Stock ) {
              out << "\tStock!" << '\n';
              v->inventory()[0] += 3;
              v->restocked();
            }
          }
          out << "Student end " << '\n';
        }

        MPRNG g_random( getpid() );

        void uMain::main() {
          {
            out << "main() start " << '\n';
            Printer p( 1, 1, 1 );
            NameServer ns;
            v = new VendingMachine( p, ns, 0, 3, 5 );
            { Student s; }
            delete v;
            out << "main() end " << '\n';
          }
          std::cout << out.str() << std::endl;
        }
######################################################################################################################
      Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Mach0   Cour0
      ******* ******* ******* ******* ******* ******* ******* ******* *******
                                                              S
                                                              r
                                                              R
                                                              r
                                                              R
                                                              r
                                                              R
                                                              B0,2
                                                              r
                                                              R
                                                              B0,1
                                                              r
                                                              R
                                                              B0,0
                                                              r
                                                              R
                                                              r
                                                              R
                                                              r
                                                              R
                                                              r
                                                              R
                                                              B0,2
                                                              r
                                                              R
                                                              B0,1
                                                              r
                                                              R
                                                              B0,0
                                                              r
                                                              R
                                                              r
                                                              R
                                                              F
      ***********************
      main() start
      Student start
      buy()
      balance: 5
      Stock: 0
              Stock!
      buy()
      balance: 5
      Stock: 3
              Free!
      buy()
      balance: 5
      Stock: 2
      getBalance() = 5
      withdrew 3 balance now: 2
              Purchase!
      buy()
      balance: 2
      Stock: 1
              Free!
      buy()
      balance: 2
      Stock: 0
              Stock!
      buy()
      balance: 2
      Stock: 3
      getBalance() = 2
              Funds!
      buy()
      balance: 15
      Stock: 3
              Free!
      buy()
      balance: 15
      Stock: 2
      getBalance() = 15
      withdrew 3 balance now: 12
              Purchase!
      buy()
      balance: 12
      Stock: 1
      getBalance() = 12
      withdrew 3 balance now: 9
              Purchase!
      buy()
      balance: 9
      Stock: 0
              Stock!
      Student end
      main() end
######################################################################################################################
  2.1 Example output 1
      This Example shows each letter each class can produce, indicating that each functionality of the code can be 
      performed.  Of note here and not shown above: Student handles lost WATCard, free soda from WATCard and gift 
      WATCard, and can buy with both the student's WATCard and the gift WATCARD; Courier can start and complete funds
      transfers and will occasionally lose a WATCard; BottlingPlant will generate soda and have it picked up by the 
      Truck; and lastly the Truck picks up shipments of soda and delivers them printing if it cannot fully resupply. 
      The config file used:

    SodaCost              2 # Manufacturer Suggested Retail Price (MSRP) per bottle
    NumStudents           5 # number of students to create
    MaxPurchases          2 # maximum number of bottles a student purchases
    NumVendingMachines    2 # number of vending machines
    MaxStockPerFlavour    5 # maximum number of bottles of each flavour in a vending machine
    MaxShippedPerFlavour  3 # maximum number of bottles of each flavour generated by the bottling
                            # plant per production run
    TimeBetweenShipments  3 # length of time between shipment pickup
    GroupoffDelay         10 # length of time between new initializing gift cards
    ParentalDelay         2 # length of time between new deposits of funds
    NumCouriers           2 # maximum number of couriers in the pool
######################################################################################################################
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Stud2   Stud3   Stud4   Mach0   Mach1   Cour0   Cour1
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******
S       S       S       S                                                                               S       S
D0,3                    R0                                                              S
D3,2                    R1                                                                      S
D3,2            C0,5    N0,0    S       S       S1,2    S2,2    S0,1    S3,1    S3,1
D0,3            W                                                                                       t0,5
D0,1            C1,5    N1,1            G4      V0                                                      L0
D2,1                            P4
                                d0,4
                                U0,16
D1,1            W               D0,0    P               V1                              r                       t1,5
D1,3            C2,5    N2,0            G6                                              R
D1,1            W                                               V0                                      t2,5
D4,2            C3,5    N3,1                    L                                                               T1,5
                W               P6                                      V1                                      t3,5
                                d1,6
                                U1,14
D2,1            C4,5    N4,0    D1,0    P                                                       r
D4,1            C0,5                    G5                                      V0              R
D3,3            W                                                                                               L3
D4,1                    N1,0    P5                                      L                                       t4,5
                                d0,5
                                U0,11
D1,1            C3,5            D0,0    P               V0                              r
D0,1                            P6      G6                                              R
                                d1,6
                                U1,8
D4,3    D2      W               D1,0    P                                                       r               T4,5
D3,3                                    G4                                              B2,0    R               t0,5
D4,1
D2,1                                                    A2,5
D1,1                            P4
D0,1    D2                      d0,4    P       G1,0                                    B1,1
D3,2                            U0,11
D1,2                            D0,2    G5                                              r
                                d1,2
                                U1,8
D1,1                            D1,2                                                    R       r
D1,3                                                                            B3,3    B3,0    R
                                P5                                              F
D2,2    D2                      d0,5    P
                                U0,8
                W               D0,1                                                                    T2,5
                                                                                                        t3,5
D3,2                            d1,1    G5                              G3,0            r       B3,1    T3,5
D4,3                            U1,9                                    F               R
D1,1                            D1,1                                                    B0,4    r
D0,3    D2                                                                                      R               T0,5
D0,3                                                            a0,2
                                P5                              F
D2,3                            d0,5    P
D3,3                    N1,1            G9
D0,3                            U0,6
D2,2                            D0,2                    V1                              r
                                d1,2
                                U1,8
        D2                      D1,1                                                    R       r
D4,1    F                                                                               B1,4    R
D0,2                                            B1,3
                                P9              F                                               B2,0
                                d0,9
                                U0,4
D1,1                            D0,6                    G2,0
                                d1,6    P               F                               r
                                U1,8
D1,1                            D1,5    G9                                              R       r
D0,1                                                                                            R
D0,2                            P5
                                d0,5
                                U0,4
D2,1                            D0,5    F                                               r
                                d1,5
                                U1,8
D1,3                            D1,5                                                    R       r
D0,1                                                                                            R
D4,3
D3,2
D3,2                            F
D1,1                    F
D3,1            F
D3,1                                                                                                    F
D0,2                                                                                                            F
D0,3
D4,1
F                                                                                       F       F
***********************
######################################################################################################################
  2.2 Example output 2
      Same config file as example 1 but with "SodaCost 5 # Manufacturer Suggested Retail Price (MSRP) per bottle".
      The only output missing from the about output is 'T' from WATCardOffice present here showing that it can
      complete both create and transfer calls.
######################################################################################################################
Parent  Gropoff WATOff  Names   Truck   Plant   Stud0   Stud1   Stud2   Stud3   Stud4   Mach0   Mach1   Cour0   Cour1
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S       S       S       S                                                                               S       S
D2,1                    R0                                                              S
D1,1                    R1                                                                      S
D0,3            C0,5    N0,0    S       S       S2,1    S2,2    S1,2    S1,2    S3,1
D1,1            W                       G9      V0                                                      t0,5
D1,2            C1,5    N1,1
D0,3            W                                       V1                                              T0,5    t1,5
D2,3            C2,5            P9
D2,2            W       N2,0    d0,9    P                                                               t2,5
                                U0,11                           V0                                      T2,5
D3,2            C3,5    N3,1    D0,0    G7                                              r
D1,3            W               P7              V1                                      R               t3,5
                                d1,7
                                U1,13
D4,3            C4,5    N4,0    D1,0    P                       B1,0                    B1,2    r               T1,5
D1,3            W               P6      G6                              V0                      R               t4,5
                                d0,6
                                U0,6
D1,2                    N4,0    D0,0    P               B2,0                            r       B2,2
D3,2                                    G3                                      V0      R       B2,1
D1,3                                            B2,0
D4,2    D5      T2,10                           F                                                               T4,5
D3,3            W                                                                                       T3,5    t2,10
D1,2                            P3                                                      B3,1
                                d1,3
                                U1,12
                                D1,0                                            B3,0
D2,2            T1,10                   P                                       F               r
                W                                                                                       t1,10
D3,3                            P7      G7                                              B1,4    R       T1,10
D2,1    D5                      d0,7    P               B2,5                                    B2,2
D4,1                                    G5              F               a1,5
D2,1                            U0,4
D2,2                            D0,3                                                    r
                                d1,3
                                U1,10
D2,3                            D1,0                                                    R       r               T2,10
D2,3    D5                                                              G1,0            B1,4    R
D1,1                            P5                                      F
D3,2                            d0,5    P                       B1,5                    B1,3
D2,1                            U0,1                            F
D0,1                            D0,0    G9                                              r
D1,2    D5                                                                              R
D1,3
D3,3                            P0      F
D2,1
D1,1
D2,1    D5
D0,1    F
D3,1                            F
D0,1                    F
D0,2            F
D4,3                                                                                                    F
D3,1                                                                                                            F
D1,1
F                                                                                       F       F
***********************